// ***************************************************************************************************
//	BOX LAYOUTS
//	Mimics typical box layouts from classical interface toolkit layout managers
//	Used to position items in a row/column one by one.
//	Allows flexible children using the 'flex' class
//	See also: http://ajaxian.com/archives/css-3-flexible-box-model
// ***************************************************************************************************

/*
 * ALIGN:
 * baseline: This value only applies to horizontally oriented boxes.
 * center: Extra space is split equally along each side of the child elements, resulting in the children being placed in the center of the box.
 * end: Child elements are placed on the right or bottom edge of the box.
 * inherit: Takes the value of this property from the computed style of the parent element.
 * start: Child elements are aligned starting from the left or top edge of the box.
 * stretch: The child elements are stretched to fit the size of the box

=box-flex($flex)
  -webkit-box-flex: $flex
  -moz-box-flex: $flex
  box-flex: $flex

=box-align($align)
  -webkit-box-align: $align
  -moz-box-align: $align
  box-align: $align

=box-core($orient)
  display: -webkit-box
  display: -moz-box
  display: box
  -webkit-box-orient: $orient
  -moz-box-orient: $orient
  box-orient: $orient
  > .flex
    +box-flex(1)

=hbox($align: center)
  +box-core(horizontal)
  +box-align($align)

=vbox($align: stretch)
  +box-core(vertical)
  +box-align($align)

// ***************************************************************************************************
//	BORDER RADIUS
// ***************************************************************************************************

// Round all borders by amount
=border-radius($radius)
  border-radius: $radius
  -moz-border-radius: $radius
  -webkit-border-radius: $radius

// Round radius at position by amount.
// values for !vert: "top", "bottom"
// values for !horz: "left", "right
=border-corner-radius($vert, $horz, $radius)
  border-#{$vert}-#{$horz}-radius: $radius
  -moz-border-radius-#{$vert}#{$horz}: $radius
  -webkit-border-#{$vert}-#{$horz}-radius: $radius

=border-top-left-radius($radius)
  +border-corner-radius(top, left, $radius)

=border-top-right-radius($radius)
  +border-corner-radius(top, right, $radius)

=border-bottom-left-radius($radius)
  +border-corner-radius(bottom, left, $radius)

=border-bottom-right-radius($radius)
  +border-corner-radius(bottom, right, $radius)

// Round top corners by amount
=border-top-radius($radius)
  +border-top-left-radius($radius)
  +border-top-right-radius($radius)

// Round right corners by amount
=border-right-radius($radius)
  +border-top-right-radius($radius)
  +border-bottom-right-radius($radius)

// Round bottom corners by amount
=border-bottom-radius($radius)
  +border-bottom-left-radius($radius)
  +border-bottom-right-radius($radius)

// Round left corners by amount
=border-left-radius($radius)
  +border-top-left-radius($radius)
  +border-bottom-left-radius($radius)

// ***************************************************************************************************
//	BOX SHADOW
// ***************************************************************************************************

//*
// Provides cross-browser css box shadows for Webkit, Gecko, and CSS3 standard
// arguments are color, horizontal offset, vertical offset, and blur

//*
// These defaults make the arguments optional for this mixin
// If you like, set different defaults in your project

=box-shadow($color, $hoff, $voff, $blur)
  -webkit-box-shadow: $color $hoff $voff $blur
  -moz-box-shadow: $color $hoff $voff $blur
  box-shadow: $color $hoff $voff $blur

// ***************************************************************************************************
//	BOX SIZING
// ***************************************************************************************************

//*
// Change the box model for Mozilla, Webkit, IE8 and the future
// @param !bs
// 	[ content-box | border-box ]
=box-sizing($bs)
  -moz-box-sizing: $bs
  -webkit-box-sizing: $bs
  -ms-box-sizing: $bs
  box-sizing: $bs

// ***************************************************************************************************
//	BACKGROUND CLIP
// ***************************************************************************************************

//*
// Configure background clipping
// @param !cl
// 	[ border | padding | text ]
=background-clip($cl)
  -moz-background-clip: $cl
  -webkit-background-clip: $cl
  -ms-background-clip: $cl
  background-clip: $cl

// ***************************************************************************************************
//	COLUMNS
// ***************************************************************************************************

//*
// CSS3 columns for Mozilla, Webkit and the Future

=column-count($n)
  -moz-column-count: $n
  -webkit-column-count: $n
  column-count: $n

=column-gap($u)
  -moz-column-gap: $u
  -webkit-column-gap: $u
  column-gap: $u

=column-width($u)
  -moz-column-width: $u
  -webkit-column-width: $u
  column-width: $u

=column-rule-width($w)
  -moz-column-rule-width: $w
  -webkit-column-rule-width: $w
  column-rule-width: $w

=column-rule-style($s)
  -moz-column-rule-style: $s
  -webkit-column-rule-style: $s
  column-rule-style: $s

=column-rule-color($c)
  -moz-column-rule-color: $c
  -webkit-column-rule-color: $c
  column-rule-color: $c

=column-rule($w, $s: solid, $c: unquote(" "))
  +column-rule-width($w)
  +column-rule-style($s)
  +column-rule-color($c)

// ***************************************************************************************************
//	GRADIENTS
// ***************************************************************************************************

// This yields a linear gradient spanning from top to bottom
//
//		 +linear-gradient(color_stops(white, black))
//
// This yields a linear gradient spanning from bottom to top
//
//		 +linear-gradient(color_stops(white, black), "bottom")
//
// This yields a linear gradient spanning from left to right
//
//		 +linear-gradient(color_stops(white, black), "left")
//
// This yields a linear gradient starting at white passing
// thru blue at 33% down and then to black
//
//		 +linear-gradient(color_stops(white, blue 33%, black))
//
// This yields a linear gradient starting at white passing
// thru blue at 33% down and then to black at 67% until the end
//
//		 +linear-gradient(color_stops(white, blue 33%, black 67%))
//
// Browsers Supported:
//
// - Chrome
// - Safari
// - Firefox 3.6

=linear-gradient($color_stops, $start: top, $imp: false)
  // Firefox's gradient api is nice.
  // Webkit's gradient api sucks -- hence these backflips:
  $end: grad_opposite_position($start)
  @if $imp
    background-image: -webkit-gradient(linear, #{grad_point($start)}, #{grad_point($end)}, #{grad_color_stops($color_stops)}) !important
    background-image: -moz-linear-gradient(#{$start}, #{$color_stops}) !important
  @else
    background-image: -webkit-gradient(linear, #{grad_point($start)}, #{grad_point($end)}, #{grad_color_stops($color_stops)})
    background-image: -moz-linear-gradient(#{$start}, #{$color_stops})

// Due to limitation's of webkit, the radial gradient mixin works best if you use
// pixel-based color stops.
//
// Examples:
//
//		 // Defaults to a centered, 100px radius gradient
//		 +radial-gradient(color_stops(#c00, #00c))
//		 // 100px radius gradient in the top left corner
//		 +radial-gradient(color_stops(#c00, #00c), "top left")
//		 // Three colors, ending at 50px and passing thru #fff at 25px
//		 +radial-gradient(color_stops(#c00, #fff, #00c 50px))
//
// Browsers Supported:
//
// - Chrome
// - Safari
// - Firefox 3.6

=radial-gradient($color_stops, $center_position: unquote("center center"))
  $end_pos: grad_end_position($color_stops, true)
  background-image: -webkit-gradient(radial, #{grad_point($center_position)}, 0, #{grad_point($center_position)}, #{$end_pos}, #{grad_color_stops($color_stops)})
  background-image: -moz-radial-gradient(#{$center_position}, circle, #{$color_stops})

// ***************************************************************************************************
//	TRANSFORM
// ***************************************************************************************************

// CSS Transform and Transform-Origin

// Apply a transform sent as a complete string
=apply-transform($transform: false)
  transform: $transform
  -webkit-transform: $transform
  -moz-transform: $transform

// Apply a transform-origin sent as a complete string
=apply-origin($origin: false)
  transform-origin: $origin
  -webkit-transform-origin: $origin
  -moz-transform-origin: $origin

// transform-origin requires x and y coordinates
//	- only applies the coordinates if they are there
//		so that it can be called by scale, rotate and skew safely
=transform-origin($originx: 50%, $originy: 50%)
  $origin: false
  @if $originx and $originy
    $origin: unquote("#{$originx} #{$originy}")
  @else if $originx
    $origin: #{$originx}
  @else if $originy
    $origin: #{$originy}
  @if $origin
    +apply-origin($origin)

// A full transform mixin with everything you could want
//	- including origin adjustments if you want them
//	- scale, rotate and skew don't require units
//		scale takes a multiplier, rotate and skew take degrees
=transform($scale: 1, $rotate: 0, $transx: 0, $transy: 0, $skewx: 0, $skewy: 0, $originx: false, $originy: false)
  $transform: unquote("scale(#{$scale}) rotate(#{$rotate}deg) translate(#{$transx}, #{$transy}) skew(#{$skewx}deg, #{$skewy}deg)")
  +apply-transform($transform)
  +transform-origin($originx, $originy)

// Transform Partials
// These work well on their own, but they don't add to each other, they override
// Use them with extra origin args, or along side +transform-origin

// adjust only the scale
//	- with optional origin coordinates
=scale($scale: 1.25, $originx: false, $originy: false)
  +apply-transform(unquote("scale(#{$scale})"))
  +transform-origin($originx, $originy)

// adjust only the rotation
//	- with optional origin coordinates
=rotate($rotate: 45, $originx: false, $originy: false)
  +apply-transform(unquote("rotate(#{$rotate}deg)"))
  +transform-origin($originx, $originy)

// adjust only the translation
=translate($transx: 0, $transy: 0)
  +apply-transform(unquote("translate(#{$transx}, #{$transy})"))

// adjust only the translation
=translate3d($transx: 0, $transy: 0, $transz: 0)
  +apply-transform(unquote("translate3d(#{$transx}, #{$transy}, #{$transz})"))

// adjust only the skew
//	- with optional origin coordinates
=skew($skewx: 0, $skewy: 0, $originx: false, $originy: false)
  +apply-transform(unquote("skew(#{$skewx}deg, #{$skewy}deg)"))
  +transform-origin($originx, $originy)

// ***************************************************************************************************
//	TRANSITION
// ***************************************************************************************************

// CSS Transitions
// Currently only works in Webkit
//	- expected in CSS3, FireFox 3.6/7 and Opera Presto 2.3
//	- we'll be prepared.

// One or more properties to transition
//	- for multiple, use a comma-delimited list
//	- also accepts "all" or "none"
=transition-property($properties: all)
  transition-property: $properties
  -webkit-transition-property: $properties
  -moz-transition-property: $properties
  -o-transition-property: $properties

// One or more durrations in seconds
//	- for multiple, use a comma-delimited list
//		- these durrations will effect the properties in the same list position
=transition-duration($duration: 1s)
  transition-duration: $duration
  -webkit-transition-duration: $duration
  -moz-transition-duration: $duration
  -o-transition-duration: $duration

// One or more timing functions
//	- [ ease | linear | ease-in | ease-out | ease-in-out | cubic-bezier(x1, y1, x2, y2)]
//	- for multiple, use a comma-delimited list
//		- these functions will effect the properties in the same list position
=transition-timing-function($function: false)
  transition-timing-function: $function
  -webkit-transition-timing-function: $function
  -moz-transition-timing-function: $function
  -o-transition-timing-function: $function

// One or more transition-delays in seconds
//	- for multiple, use a comma-delimited list
//		- these delays will effect the properties in the same list position
=transition-delay($delay: false)
  transition-delay: $delay
  -webkit-transition-delay: $delay
  -moz-transition-delay: $delay
  -o-transition-delay: $delay

// Transition all-in-one shorthand
=transition($properties: all, $duration: 1s, $function: false, $delay: false)
  +transition-property($properties)
  +transition-duration($duration)
  @if $function
    +transition-timing-function($function)
  @if $delay
    +transition-delay($delay)

// ***************************************************************************************************
//	APPEARANCE
// ***************************************************************************************************

=appearance($appearance)
  -webkit-appearance: $appearance
  -moz-appearance: $appearance
  appearance: $appearance

// ***************************************************************************************************
//	USER SELECT
// ***************************************************************************************************

=user-select($sel)
  -webkit-user-select: $sel
  -moz-user-select: $sel
  user-select: $sel

// ***************************************************************************************************
//	TEXT OVERFLOW
// ***************************************************************************************************

=text-overflow
  overflow: hidden
  -o-text-overflow: ellipsis
  text-overflow: ellipsis
